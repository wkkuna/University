#!/usr/bin/env python3

import os
import argparse
import subprocess

# https://www.7-cpu.com/cpu/Skylake.html
# Branch misprediction penalty = 16.5 cycles average


def shell(prog):
    return subprocess.run(prog, stdout=subprocess.PIPE, stderr=subprocess.PIPE)


def run_profiler(prog, proc):
    callgrind = shell(['valgrind', '--tool=callgrind',
                       '--branch-sim=yes',
                       '--cache-sim=yes',
                       '--toggle-collect=' + proc,
                       '--callgrind-out-file=callgrind.out'] + prog)
    if callgrind.returncode:
        print(callgrind.stdout.decode())
        raise SystemExit('Your program gives wrong answer!')

    annotate = shell(['callgrind_annotate', 'callgrind.out'])

    section = None
    columns = None
    procinst = {}
    for line in annotate.stdout.decode().splitlines():
        if not line or line.startswith('---'):
            continue
        if section == 'Ir':
            line = line.strip().replace(',', '').split()
            info = {}
            for col, field in zip(columns, line):
                try:
                    if field == '.':
                        field = 0
                    info[col] = int(field)
                except ValueError:
                    info[col] = field
            loc = info['file:function']
            procinst[loc] = info
        if 'Ir' in line and 'file:function' in line:
            columns = line.strip().split()
            section = 'Ir'

    os.remove('callgrind.out')
    return procinst


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Run program and check number of executed instructions.')
    parser.add_argument('--procedure', type=str,
                        help=('source file name and procedure name '
                              'separated by colon'))
    parser.add_argument('--max-branch-miss', type=float, default=None,
                        help=('maximum branch missprediction rate'))
    parser.add_argument('--max-insns', type=int,
                        help=('maximum number of executed instructions '
                              'for given procedure name and source file'))
    parser.add_argument('--quiet', action='store_true',
                        help='do not print profile information')
    parser.add_argument('program', type=str, nargs='+',
                        help='print analysis information')
    args = parser.parse_args()

    source, procedure = args.procedure.split(':')

    profile = run_profiler(args.program, procedure)
    info = profile.get(args.procedure, 0)
    insns = info['Ir']
    if insns == 0:
        raise SystemExit('Procedure "%s" not found in "%s"!' % (
                         procedure, source))

    if not args.quiet:
        print('Executed instructions: %d' % insns)
    if args.max_insns and insns > args.max_insns:
        raise SystemExit('Your program takes to much time to run!\n'
                         'Exceeded limit of executed instructions: %d!' %
                         args.max_insns)

    if 'Bc' in info:
        branch_miss = info['Bcm'] / (info['Bc'] or 1)
        if not args.quiet:
            print('Mispredicted branches: %s/%s (%s%%)' % (
                info['Bcm'], info['Bc'], branch_miss * 100.0))
        if args.max_branch_miss and branch_miss > args.max_branch_miss:
            raise SystemExit('Your program runs inefficienly due to too many '
                             'conditional branches being mispredicted!\n'
                             'Exceeded limit of branch missprediction: %s%%!' %
                             (args.max_branch_miss * 100.0))
